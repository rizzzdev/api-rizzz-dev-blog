// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/server/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PROD_DATABASE_URL")
}

model Users {
  id           String      @id @default(uuid())
  fullName     String
  registeredAt DateTime
  deletedAt    DateTime?
  reaction     Reactions[]
  stars        Stars[]
  pageviews    Pageviews[]
}

model Authors {
  id           String     @id @default(uuid())
  authorId     String     @unique
  password     String
  fullName     String
  registeredAt DateTime
  deletedAt    DateTime?
  articles     Articles[]
  sessions     Sessions[]
}

model Sessions {
  id           String    @id @default(uuid())
  author       Authors   @relation(references: [authorId], fields: [authorId])
  authorId     String
  password     String
  loggedInAt   DateTime
  loggedOutAdt DateTime?
}

model Articles {
  id              String            @id @default(uuid())
  title           String
  description     String
  articleMarkdown String
  imageUrl        String?
  author          Authors           @relation(references: [id], fields: [authorId])
  authorId        String
  stars           Stars[]
  reactions       Reactions[]
  topics          ArticleToTopics[]
  pageviews       Pageviews[]
  createdAt       DateTime
  deletedAt       DateTime?
}

model Reactions {
  id           String    @id @default(uuid())
  user         Users     @relation(references: [id], fields: [userId])
  userId       String
  article      Articles  @relation(references: [id], fields: [articleId])
  articleId    String
  reactionText String
  createdAt    DateTime
  deletedAt    DateTime?
}

model Stars {
  id        String    @id @default(uuid())
  article   Articles? @relation(references: [id], fields: [articleId])
  articleId String?
  user      Users     @relation(references: [id], fields: [userId])
  userId    String
  createdAt DateTime
  deletedAt DateTime?
}

model Topics {
  id        String            @id @default(uuid())
  articles  ArticleToTopics[]
  topicName String
  createdAt DateTime
  deletedAt DateTime?
}

model ArticleToTopics {
  id        String    @id @default(uuid())
  article   Articles  @relation(references: [id], fields: [articleId])
  articleId String
  topic     Topics    @relation(references: [id], fields: [topicId])
  topicId   String
  createdAt DateTime
  deletedAt DateTime?
}

model Pageviews {
  id        String    @id @default(uuid())
  article   Articles? @relation(references: [id], fields: [articleId])
  articleId String?
  user      Users     @relation(references: [id], fields: [userId])
  userId    String
  createdAt DateTime
  deletedAt DateTime?
}
