// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/server/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_DATABASE_URL")
}

model Users {
  id           String      @id @default(uuid())
  fullName     String
  registeredAt DateTime
  deletedAt    DateTime?
  comments     Comments[]
  likes        Likes[]
  pageviews    Pageviews[]
}

model Authors {
  id           String     @id @default(uuid())
  authorId     String     @unique
  password     String
  fullName     String
  registeredAt DateTime
  deletedAt    DateTime?
  posts        Posts[]
  sessions     Sessions[]
}

model Sessions {
  id           String    @id @default(uuid())
  author       Authors   @relation(references: [authorId], fields: [authorId])
  authorId     String
  password     String
  loggedInAt   DateTime
  loggedOutAdt DateTime?
}

model Posts {
  id           String             @id @default(uuid())
  title        String
  description  String
  postMarkdown String
  imageUrl     String?
  author       Authors            @relation(references: [id], fields: [authorId])
  authorId     String
  likes        Likes[]
  comments     Comments[]
  categories   PostToCategories[]
  pageviews    Pageviews[]
  createdAt    DateTime
  deletedAt    DateTime?
}

model Comments {
  id          String    @id @default(uuid())
  user        Users     @relation(references: [id], fields: [userId])
  userId      String
  post        Posts     @relation(references: [id], fields: [postId])
  postId      String
  commentText String
  likes       Likes[]
  createdAt   DateTime
  deletedAt   DateTime?
}

model Likes {
  id        String    @id @default(uuid())
  post      Posts?    @relation(references: [id], fields: [postId])
  postId    String?
  user      Users     @relation(references: [id], fields: [userId])
  userId    String
  comment   Comments? @relation(references: [id], fields: [commentId])
  commentId String?
  createdAt DateTime
  deletedAt DateTime?
}

model Categories {
  id           String             @id @default(uuid())
  posts        PostToCategories[]
  categoryName String
  createdAt    DateTime
  deletedAt    DateTime?
}

model PostToCategories {
  id         String     @id @default(uuid())
  post       Posts      @relation(references: [id], fields: [postId])
  postId     String
  category   Categories @relation(references: [id], fields: [categoryId])
  categoryId String
  createdAt  DateTime
  deletedAt  DateTime?
}

model Pageviews {
  id        String    @id @default(uuid())
  post      Posts?    @relation(references: [id], fields: [postId])
  postId    String?
  user      Users     @relation(references: [id], fields: [userId])
  userId    String
  createdAt DateTime
  deletedAt DateTime?
}
